From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Thu, 17 Dec 2020 16:24:12 -0500
Subject: [PATCH] remove some movement checks


diff --git a/src/main/java/net/minecraft/server/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/DedicatedServerProperties.java
index 91c72127efb4107fa6b41555a9596434e453eadb..38f16bfab23b03e26ed72334f556f564f7c5c3a8 100644
--- a/src/main/java/net/minecraft/server/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/DedicatedServerProperties.java
@@ -14,7 +14,7 @@ public class DedicatedServerProperties extends PropertyManager<DedicatedServerPr
     public final boolean spawnAnimals = this.getBoolean("spawn-animals", true);
     public final boolean spawnNpcs = this.getBoolean("spawn-npcs", true);
     public final boolean pvp = this.getBoolean("pvp", true);
-    public final boolean allowFlight = this.getBoolean("allow-flight", false);
+    public final boolean allowFlight = true; // Titanium - Remove movement checks
     public final String resourcePack = this.getString("resource-pack", "");
     public final String motd = this.getString("motd", "A Minecraft Server");
     public final boolean forceGamemode = this.getBoolean("force-gamemode", false);
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 97421262166fdb1a2822a12a2b908807d2c9e650..30947e31981b5c44cfc73b7ef2f4803b32f4f038 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -179,11 +179,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
         ++this.e;
         this.processedMovePackets = this.receivedMovePackets;
         if (this.B && !this.player.isSleeping()) {
-            if (++this.C > 80) {
-                PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", this.player.getDisplayName().getString());
-                this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
-                return;
-            }
+            // Titanium start - Remove movement checks
+            // if (++this.C > 80) {
+            //     PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", this.player.getDisplayName().getString());
+            //     this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
+            //     return;
+            // }
+
+            // Titanium end - Remove movement checks
         } else {
             this.B = false;
             this.C = 0;
@@ -198,11 +201,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
             this.w = this.r.locY();
             this.x = this.r.locZ();
             if (this.D && this.player.getRootVehicle().getRidingPassenger() == this.player) {
-                if (++this.E > 80) {
-                    PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getDisplayName().getString());
-                    this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
-                    return;
-                }
+                // Titanium start - Remove movement checks
+                // if (++this.E > 80) {
+                //     PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getDisplayName().getString());
+                //     this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
+                //     return;
+                // }
+                return;
+                // Titanium end - Remove movement checks
             } else {
                 this.D = false;
                 this.E = 0;
@@ -449,12 +455,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
                 // Paper end
 
-                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
-                // CraftBukkit end
-                    PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getDisplayName().getString(), this.player.getDisplayName().getString(), d6, d7, d8);
-                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
-                    return;
-                }
+                // Titanium start - Remove movement checks
+                // if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
+                // // CraftBukkit end
+                //     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getDisplayName().getString(), this.player.getDisplayName().getString(), d6, d7, d8);
+                //     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
+                //     return;
+                // }
+                // Titanium end - Remove movement checks
 
                 boolean flag = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
 
@@ -474,10 +482,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 d10 = d6 * d6 + d7 * d7 + d8 * d8;
                 boolean flag1 = false;
 
-                if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) { // Spigot
-                    flag1 = true;
-                    PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved wrongly! {}", entity.getDisplayName().getString(), this.player.getDisplayName().getString(), Math.sqrt(d10));
-                }
+                // Titanium start - Remove movement checks
+                // if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) { // Spigot
+                //     flag1 = true;
+                //     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved wrongly! {}", entity.getDisplayName().getString(), this.player.getDisplayName().getString(), Math.sqrt(d10));
+                // }
+                // Titanium end - Remove movement checks
+
                 Location curPos = this.getPlayer().getLocation(); // Spigot
 
                 entity.setLocation(d3, d4, d5, f, f1);
@@ -1185,16 +1196,18 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             }
                             // Paper end
 
-                            if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
-                                float f2 = this.player.isGliding() ? 300.0F : 100.0F;
+                            // Titanium start - Remove movement checks
+                            // if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
+                            //     float f2 = this.player.isGliding() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
-                                // CraftBukkit end
-                                    PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getDisplayName().getString(), d7, d8, d9);
-                                    this.a(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch);
-                                    return;
-                                }
-                            }
+                            //     if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
+                            //     // CraftBukkit end
+                            //         PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getDisplayName().getString(), d7, d8, d9);
+                            //         this.a(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch);
+                            //         return;
+                            //     }
+                            // }
+                            // Titanium end - Remove movement checks
 
                             AxisAlignedBB axisalignedbb = this.player.getBoundingBox();
 
@@ -1254,10 +1267,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             d11 = d7 * d7 + d8 * d8 + d9 * d9;
                             boolean flag1 = false;
 
-                            if (!this.player.H() && d11 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) { // Spigot
-                                flag1 = true;
-                                PlayerConnection.LOGGER.warn("{} moved wrongly! ({})", this.player.getDisplayName().getString(), d11); // Purpur
-                            }
+                            // Titanium start - Remove movement checks
+                            // if (!this.player.H() && d11 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) { // Spigot
+                            //     flag1 = true;
+                            //     PlayerConnection.LOGGER.warn("{} moved wrongly! ({})", this.player.getDisplayName().getString(), d11); // Purpur
+                            // }
+                            // Titanium end - Remove movement checks
 
                             this.player.setLocation(d4, d5, d6, f, f1);
                             if (!this.player.noclip && !this.player.isSleeping() && (flag1 && worldserver.getCubes(this.player, axisalignedbb) || (didCollide && this.a((IWorldReader) worldserver, axisalignedbb)))) { // Tuinity - optimise out the extra getCubes-like call most of the time
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 4f42bc21839086b2a40a35910a08d9b11c7649f9..d294b40fbb98f7076d0606719d6d9cb3c054730e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1654,9 +1654,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void setFlying(boolean value) {
         boolean needsUpdate = getHandle().abilities.isFlying != value; // Paper - Only refresh abilities if needed
-        if (!getAllowFlight() && value) {
-            throw new IllegalArgumentException("Cannot make player fly if getAllowFlight() is false");
-        }
+        // Titanium start - Remove movement checks
+        // if (!getAllowFlight() && value) {
+        //     throw new IllegalArgumentException("Cannot make player fly if getAllowFlight() is false");
+        // }
+        // Titanium start - Remove movement checks
 
         getHandle().abilities.isFlying = value;
         if (needsUpdate) getHandle().updateAbilities(); // Paper - Only refresh abilities if needed
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 25a0873553a0ec6b2913e0cfb928f98e6f3f0bb7..6a34cede98020ef0a09a9108f174f40efc665c48 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -338,17 +338,21 @@ public class SpigotConfig
         saveUserCacheOnStopOnly = getBoolean( "settings.save-user-cache-on-stop-only", false );
     }
 
-    public static double movedWronglyThreshold;
-    private static void movedWronglyThreshold()
-    {
-        movedWronglyThreshold = getDouble( "settings.moved-wrongly-threshold", 0.0625D );
-    }
-
-    public static double movedTooQuicklyMultiplier;
-    private static void movedTooQuicklyMultiplier()
-    {
-        movedTooQuicklyMultiplier = getDouble( "settings.moved-too-quickly-multiplier", 10.0D );
-    }
+    // Titanium start - Remove movement checks
+    // public static double movedWronglyThreshold;
+    // private static void movedWronglyThreshold()
+    // {
+    //     movedWronglyThreshold = getDouble( "settings.moved-wrongly-threshold", 0.0625D );
+    // }
+    // Titanium end - Remove movement checks
+
+    // Titanium start - Remove movement checks
+    // public static double movedTooQuicklyMultiplier;
+    // private static void movedTooQuicklyMultiplier()
+    // {
+    //     movedTooQuicklyMultiplier = getDouble( "settings.moved-too-quickly-multiplier", 10.0D );
+    // }
+    // Titanium end - Remove movement checks
 
     public static double maxHealth = 2048;
     public static double movementSpeed = 2048;
