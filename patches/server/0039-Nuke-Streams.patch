From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Thu, 7 Jan 2021 10:05:23 -0500
Subject: [PATCH] Nuke Streams


diff --git a/src/main/java/net/minecraft/server/BehaviorUtil.java b/src/main/java/net/minecraft/server/BehaviorUtil.java
index d0e7c6b4c0b1e5993f0019e7a448423e048a8af5..b788685331bc28e0d339e6600b5805a2bed4cf27 100644
--- a/src/main/java/net/minecraft/server/BehaviorUtil.java
+++ b/src/main/java/net/minecraft/server/BehaviorUtil.java
@@ -84,12 +84,25 @@ public class BehaviorUtil {
 
     public static SectionPosition a(WorldServer worldserver, SectionPosition sectionposition, int i) {
         int j = worldserver.b(sectionposition);
+        // Yatopia start - replace stream
+        SectionPosition best = null;
+        for (SectionPosition pos : SectionPosition.getPosList(sectionposition, i)) {
+            if (worldserver.b(pos) < j) {
+                if (best == null || worldserver.b(pos) < worldserver.b(best)) {
+                    best = pos;
+                }
+            }
+        }
+        if (best == null) best = sectionposition;
+        return best;
+        /*
         Stream<SectionPosition> stream = SectionPosition.a(sectionposition, i).filter((sectionposition1) -> { // CraftBukkit - decompile error
             return worldserver.b(sectionposition1) < j;
         });
 
         worldserver.getClass();
         return (SectionPosition) stream.min(Comparator.comparingInt(worldserver::b)).orElse(sectionposition);
+         */ // Yatopia end
     }
 
     public static boolean a(EntityInsentient entityinsentient, EntityLiving entityliving, int i) {
diff --git a/src/main/java/net/minecraft/server/BlockBase.java b/src/main/java/net/minecraft/server/BlockBase.java
index 52a70475de458a58690b21822103eda253ba9861..ddcd8831eaf95c2c265134bc9633d92fe08e2e89 100644
--- a/src/main/java/net/minecraft/server/BlockBase.java
+++ b/src/main/java/net/minecraft/server/BlockBase.java
@@ -680,6 +680,7 @@ public abstract class BlockBase {
             return this.getBlock().getInventory(this.p(), world, blockposition);
         }
 
+        public final boolean hasTag(Tag<Block> tag) { return a(tag); } // Yatopia - OBFHELPER
         public boolean a(Tag<Block> tag) {
             return this.getBlock().a(tag);
         }
@@ -689,6 +690,7 @@ public abstract class BlockBase {
         }
 
         public boolean equals(Block block) { return a(block); } // Purpur - OBFHELPER
+        public final boolean isBlock(Block block) { return a(block); } // Yatopia - OBFHELPER
         public boolean a(Block block) {
             return this.getBlock().a(block);
         }
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index a84ddfa6299069aab04128a03f4798d473817a98..dc99803839e51c3722050aabf95de292bb441ba5 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -318,7 +318,15 @@ public class BlockPosition extends BaseBlockPosition {
     }
 
     public static Optional<BlockPosition> a(BlockPosition blockposition, int i, int j, Predicate<BlockPosition> predicate) {
-        return b(blockposition, i, j, i).filter(predicate).findFirst();
+        // Yatopia start - avoid using stream
+        // return b(blockposition, i, j, i).filter(predicate).findFirst();
+        for (BlockPosition pos : a(blockposition, i, j, i)) {
+            if (predicate.test(pos)) {
+                return Optional.of(pos);
+            }
+        }
+        return Optional.empty();
+        // Yatopia end
     }
 
     public static Stream<BlockPosition> b(BlockPosition blockposition, int i, int j, int k) {
diff --git a/src/main/java/net/minecraft/server/ItemCrossbow.java b/src/main/java/net/minecraft/server/ItemCrossbow.java
index 9bf5d77db3bca4073867139844fbcdcc4d3f7c83..c9ffc522bb8c72e2fe1de0a38795204383ac835f 100644
--- a/src/main/java/net/minecraft/server/ItemCrossbow.java
+++ b/src/main/java/net/minecraft/server/ItemCrossbow.java
@@ -176,9 +176,18 @@ public class ItemCrossbow extends ItemProjectileWeapon implements ItemVanishable
     }
 
     public static boolean a(ItemStack itemstack, Item item) {
-        return k(itemstack).stream().anyMatch((itemstack1) -> {
-            return itemstack1.getItem() == item;
-        });
+        // Paper start - Remove stream with OBFHELPER
+        return containsChargedProjectile(itemstack, item);
+    }
+
+    public static boolean containsChargedProjectile(ItemStack itemstack, Item item) { 
+        for (ItemStack itemStack : k(itemstack)) {
+            if (itemStack.getItem() == item) {
+                return true;
+            }
+        }
+        return false;
+        // Paper end
     }
 
     private static void a(World world, EntityLiving entityliving, EnumHand enumhand, ItemStack itemstack, ItemStack itemstack1, float f, boolean flag, float f1, float f2, float f3) {
diff --git a/src/main/java/net/minecraft/server/Raid.java b/src/main/java/net/minecraft/server/Raid.java
index 78f818bc7542868ec9e7caeb10a75180fb0b5e07..11f768e04d71b96350fdb586a280c52e062dfcf2 100644
--- a/src/main/java/net/minecraft/server/Raid.java
+++ b/src/main/java/net/minecraft/server/Raid.java
@@ -355,6 +355,18 @@ public class Raid {
     }
 
     private void z() {
+        // Yatopia start - replace impl
+        BlockPosition best = null;
+        for (SectionPosition pos : SectionPosition.getPosList(SectionPosition.a(center), 2)) {
+            if (world.a(pos)) {
+                BlockPosition asBlockPos = pos.q();
+                if (best == null || asBlockPos.distanceSquared(center) < best.distanceSquared(center)) {
+                    best = asBlockPos;
+                }
+            }
+        }
+        if (best != null) this.c(best);
+        /*
         Stream<SectionPosition> stream = SectionPosition.a(SectionPosition.a(this.center), 2);
         WorldServer worldserver = this.world;
 
@@ -362,6 +374,7 @@ public class Raid {
         stream.filter(worldserver::a).map(SectionPosition::q).min(Comparator.comparingDouble((blockposition) -> {
             return blockposition.j(this.center);
         })).ifPresent(this::c);
+         */ // Yatopia end
     }
 
     private Optional<BlockPosition> d(int i) {
